@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "../tokens/font";

/// Base on -zf-map-next https://github.com/zurb/foundation-sites/blob/develop/scss/util/_breakpoint.scss
/// Find the next key in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
///
/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function map-next($map, $key, $return: "value") {
  // Store the keys of the map as a list
  $values: map.keys($map);

  $i: 0;

  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map
  @if (map.has-key($map, $key)) {
    $i: list.index($values, $key) + 1;
  }

  // If the key doesn't exist, or it's the last key in the map, return null
  @if ($i > list.length($map) or $i == 0) {
    @return null;
  }

  // Otherwise, return the value
  @else {
    @if $return == "value" {
      @return map.get($map, list.nth($values, $i));
    } @else {
      @return list.nth($values, $i);
    }
  }
}

@function rem($size, $base: font.$font-size-default) {
  @return math.div($size, $base) * 1rem;
}

/// Get prefixed variant name
/// @param {String} $name - Variant name
/// @return {String} - Return a prefixed variant name or empty string, for default variants
/// @example scss
///   variant-name('primary') // 'primary'
///   variant-name('default') // ''
///
@function variant-name($name, $prefix: "--", $suffix: "") {
  @if not $name or $name == default or $name == xs {
    @return "";
  }

  @return #{$prefix + $name + $suffix};
}

/// Get css propeties from map
///
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
///
/// @example
/// $map: (
///   background-color: #fff,
///   color: #000
/// );
///
/// .example {
///   @include css-map($map);
///  }
///
/// Output:
/// .example {
///   background-color: #fff;
///   color: #000;
/// }
@mixin css-map($map, $keys...) {
  $_map: $map;

  @if (list.length($keys) == 1) {
    $_map: map.get($map, list.nth($keys, 1));
  }

  @if (list.length($keys) > 1) {
    $_map: map.get($map, list.nth($keys, 1), map.remove($keys, $key));
  }

  @each $prop, $value in $_map {
    #{$prop}: #{$value};
  }
}

/// Get variants of elemnt from map
///
/// @param {Map} $map - map
/// @param {Map} $className - class name of element
/// @param {Map} $classSuffix - suffix for class name of element
@mixin variants($map, $className: "", $classSuffix: "") {
  @each $variant, $props in $map {
    #{$className + variant-name($variant) + $classSuffix} {
      @include css-map($props);
    }
  }
}

// Hide visually, still visible to screenreaders
@mixin visually-hidden {
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  position: absolute;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
}
