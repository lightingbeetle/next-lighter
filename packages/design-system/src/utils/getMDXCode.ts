import { bundleMDX } from "mdx-bundler";
import path from "path";
import ImportGlobPlugin from "esbuild-plugin-import-glob";

import esbuildReactDocgenTypescriptPlugin from "./esbuild-react-docgen-typescript";

export default async function getMDXCode(
  source: string,
  pathToSource: string,
  baseName?: string
) {
  return await bundleMDX({
    source,
    cwd: path.dirname(pathToSource),
    globals: {
      "@lighting-beetle/lighter-styleguide": {
        varName: "lighterStyleguide",
        namedExports: ["Preview", "Code", "Props", "Rectangle", "Table"],
        defaultExport: false,
      },
    },
    esbuildOptions: (options) => {
      options.loader = {
        ...options.loader,
        ".png": "file",
        ".jpg": "file",
        ".mp4": "file",
        ".svg": "file",
        ".js": "jsx",
      };

      options.minify = false;

      // we need to store files generated by file loader somewhere
      options.publicPath = "/assets";
      options.write = true;
      options.outdir = path.join(process.cwd(), "/public/assets");

      // process is not automatically provided by esbuild but we need to access env
      options.define = {
        process: JSON.stringify({
          env: {
            PUBLIC_URL: process.env.PUBLIC_URL,
            REACT_APP_VERSION: process.env.REACT_APP_VERSION,
          },
        }),
      };

      options.plugins = [
        esbuildReactDocgenTypescriptPlugin({ baseName }),
        ImportGlobPlugin(),
        ...(options.plugins ?? []),
        {
          name: "empty-(s)css-imports",
          setup(build) {
            build.onLoad({ filter: /\.(s)css$/ }, () => ({ contents: "" }));
          },
        },
      ];

      return options;
    },
  });
}
